# Generated by Django 5.2.3 on 2025-06-22 22:34

from django.db import migrations


def reset_plant_schema(apps, schema_editor):
    """Reset plant schema to a clean state"""
    db_alias = schema_editor.connection.alias
    
    with schema_editor.connection.cursor() as cursor:
        # First, check what columns exist
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name='plants_plant';
        """)
        existing_columns = [row[0] for row in cursor.fetchall()]
        print(f"Existing columns: {existing_columns}")
        
        # Ensure all required columns exist with proper defaults
        required_columns = {
            'care_streak': 'INTEGER DEFAULT 0 NOT NULL',
            'last_care_date': 'DATE NULL',
            'combined_mood_score': 'DOUBLE PRECISION DEFAULT 0.5 NOT NULL',
            'journal_mood_score': 'DOUBLE PRECISION DEFAULT 0.5 NOT NULL',
            'spotify_mood_score': 'DOUBLE PRECISION DEFAULT 0.5 NOT NULL'
        }
        
        for column_name, column_definition in required_columns.items():
            if column_name not in existing_columns:
                cursor.execute(f'ALTER TABLE plants_plant ADD COLUMN {column_name} {column_definition};')
                print(f"Added column: {column_name}")
            else:
                print(f"Column already exists: {column_name}")


def reverse_reset_plant_schema(apps, schema_editor):
    """Reverse the schema reset"""
    # Don't actually remove columns in reverse - too risky
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('plants', '0004_auto_20250622_2045'),
    ]

    operations = [
        migrations.RunPython(
            reset_plant_schema,
            reverse_reset_plant_schema,
        ),
    ]
